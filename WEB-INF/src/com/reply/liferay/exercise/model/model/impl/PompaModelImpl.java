/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.reply.liferay.exercise.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.reply.liferay.exercise.model.model.Pompa;
import com.reply.liferay.exercise.model.model.PompaModel;
import com.reply.liferay.exercise.model.model.PompaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Pompa service. Represents a row in the &quot;SG_Pompa&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.reply.liferay.exercise.model.model.PompaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PompaImpl}.
 * </p>
 *
 * @author s.girardello
 * @see PompaImpl
 * @see com.reply.liferay.exercise.model.model.Pompa
 * @see com.reply.liferay.exercise.model.model.PompaModel
 * @generated
 */
@JSON(strict = true)
public class PompaModelImpl extends BaseModelImpl<Pompa> implements PompaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pompa model instance should use the {@link com.reply.liferay.exercise.model.model.Pompa} interface instead.
	 */
	public static final String TABLE_NAME = "SG_Pompa";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "pompaId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "quantitaDiesel", Types.INTEGER },
			{ "quantitaBenzina", Types.INTEGER },
			{ "tempoGiacenza", Types.INTEGER },
			{ "incassoTotalePompa", Types.INTEGER },
			{ "statoPompa", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SG_Pompa (uuid_ VARCHAR(75) null,pompaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,quantitaDiesel INTEGER,quantitaBenzina INTEGER,tempoGiacenza INTEGER,incassoTotalePompa INTEGER,statoPompa BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SG_Pompa";
	public static final String ORDER_BY_JPQL = " ORDER BY pompa.pompaId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SG_Pompa.pompaId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.reply.liferay.exercise.model.model.Pompa"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.reply.liferay.exercise.model.model.Pompa"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.reply.liferay.exercise.model.model.Pompa"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long POMPAID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Pompa toModel(PompaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Pompa model = new PompaImpl();

		model.setUuid(soapModel.getUuid());
		model.setPompaId(soapModel.getPompaId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setQuantitaDiesel(soapModel.getQuantitaDiesel());
		model.setQuantitaBenzina(soapModel.getQuantitaBenzina());
		model.setTempoGiacenza(soapModel.getTempoGiacenza());
		model.setIncassoTotalePompa(soapModel.getIncassoTotalePompa());
		model.setStatoPompa(soapModel.getStatoPompa());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Pompa> toModels(PompaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Pompa> models = new ArrayList<Pompa>(soapModels.length);

		for (PompaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.reply.liferay.exercise.model.model.Pompa"));

	public PompaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pompaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPompaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pompaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Pompa.class;
	}

	@Override
	public String getModelClassName() {
		return Pompa.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("pompaId", getPompaId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("quantitaDiesel", getQuantitaDiesel());
		attributes.put("quantitaBenzina", getQuantitaBenzina());
		attributes.put("tempoGiacenza", getTempoGiacenza());
		attributes.put("incassoTotalePompa", getIncassoTotalePompa());
		attributes.put("statoPompa", getStatoPompa());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long pompaId = (Long)attributes.get("pompaId");

		if (pompaId != null) {
			setPompaId(pompaId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer quantitaDiesel = (Integer)attributes.get("quantitaDiesel");

		if (quantitaDiesel != null) {
			setQuantitaDiesel(quantitaDiesel);
		}

		Integer quantitaBenzina = (Integer)attributes.get("quantitaBenzina");

		if (quantitaBenzina != null) {
			setQuantitaBenzina(quantitaBenzina);
		}

		Integer tempoGiacenza = (Integer)attributes.get("tempoGiacenza");

		if (tempoGiacenza != null) {
			setTempoGiacenza(tempoGiacenza);
		}

		Integer incassoTotalePompa = (Integer)attributes.get(
				"incassoTotalePompa");

		if (incassoTotalePompa != null) {
			setIncassoTotalePompa(incassoTotalePompa);
		}

		Boolean statoPompa = (Boolean)attributes.get("statoPompa");

		if (statoPompa != null) {
			setStatoPompa(statoPompa);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPompaId() {
		return _pompaId;
	}

	@Override
	public void setPompaId(long pompaId) {
		_pompaId = pompaId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getQuantitaDiesel() {
		return _quantitaDiesel;
	}

	@Override
	public void setQuantitaDiesel(int quantitaDiesel) {
		_quantitaDiesel = quantitaDiesel;
	}

	@JSON
	@Override
	public int getQuantitaBenzina() {
		return _quantitaBenzina;
	}

	@Override
	public void setQuantitaBenzina(int quantitaBenzina) {
		_quantitaBenzina = quantitaBenzina;
	}

	@JSON
	@Override
	public int getTempoGiacenza() {
		return _tempoGiacenza;
	}

	@Override
	public void setTempoGiacenza(int tempoGiacenza) {
		_tempoGiacenza = tempoGiacenza;
	}

	@JSON
	@Override
	public int getIncassoTotalePompa() {
		return _incassoTotalePompa;
	}

	@Override
	public void setIncassoTotalePompa(int incassoTotalePompa) {
		_incassoTotalePompa = incassoTotalePompa;
	}

	@JSON
	@Override
	public boolean getStatoPompa() {
		return _statoPompa;
	}

	@Override
	public boolean isStatoPompa() {
		return _statoPompa;
	}

	@Override
	public void setStatoPompa(boolean statoPompa) {
		_statoPompa = statoPompa;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Pompa.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Pompa.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Pompa toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Pompa)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PompaImpl pompaImpl = new PompaImpl();

		pompaImpl.setUuid(getUuid());
		pompaImpl.setPompaId(getPompaId());
		pompaImpl.setGroupId(getGroupId());
		pompaImpl.setCompanyId(getCompanyId());
		pompaImpl.setUserId(getUserId());
		pompaImpl.setUserName(getUserName());
		pompaImpl.setCreateDate(getCreateDate());
		pompaImpl.setModifiedDate(getModifiedDate());
		pompaImpl.setQuantitaDiesel(getQuantitaDiesel());
		pompaImpl.setQuantitaBenzina(getQuantitaBenzina());
		pompaImpl.setTempoGiacenza(getTempoGiacenza());
		pompaImpl.setIncassoTotalePompa(getIncassoTotalePompa());
		pompaImpl.setStatoPompa(getStatoPompa());

		pompaImpl.resetOriginalValues();

		return pompaImpl;
	}

	@Override
	public int compareTo(Pompa pompa) {
		long primaryKey = pompa.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Pompa)) {
			return false;
		}

		Pompa pompa = (Pompa)obj;

		long primaryKey = pompa.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PompaModelImpl pompaModelImpl = this;

		pompaModelImpl._originalUuid = pompaModelImpl._uuid;

		pompaModelImpl._originalGroupId = pompaModelImpl._groupId;

		pompaModelImpl._setOriginalGroupId = false;

		pompaModelImpl._originalCompanyId = pompaModelImpl._companyId;

		pompaModelImpl._setOriginalCompanyId = false;

		pompaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Pompa> toCacheModel() {
		PompaCacheModel pompaCacheModel = new PompaCacheModel();

		pompaCacheModel.uuid = getUuid();

		String uuid = pompaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			pompaCacheModel.uuid = null;
		}

		pompaCacheModel.pompaId = getPompaId();

		pompaCacheModel.groupId = getGroupId();

		pompaCacheModel.companyId = getCompanyId();

		pompaCacheModel.userId = getUserId();

		pompaCacheModel.userName = getUserName();

		String userName = pompaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pompaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pompaCacheModel.createDate = createDate.getTime();
		}
		else {
			pompaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pompaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pompaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		pompaCacheModel.quantitaDiesel = getQuantitaDiesel();

		pompaCacheModel.quantitaBenzina = getQuantitaBenzina();

		pompaCacheModel.tempoGiacenza = getTempoGiacenza();

		pompaCacheModel.incassoTotalePompa = getIncassoTotalePompa();

		pompaCacheModel.statoPompa = getStatoPompa();

		return pompaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", pompaId=");
		sb.append(getPompaId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", quantitaDiesel=");
		sb.append(getQuantitaDiesel());
		sb.append(", quantitaBenzina=");
		sb.append(getQuantitaBenzina());
		sb.append(", tempoGiacenza=");
		sb.append(getTempoGiacenza());
		sb.append(", incassoTotalePompa=");
		sb.append(getIncassoTotalePompa());
		sb.append(", statoPompa=");
		sb.append(getStatoPompa());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.reply.liferay.exercise.model.model.Pompa");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pompaId</column-name><column-value><![CDATA[");
		sb.append(getPompaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantitaDiesel</column-name><column-value><![CDATA[");
		sb.append(getQuantitaDiesel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantitaBenzina</column-name><column-value><![CDATA[");
		sb.append(getQuantitaBenzina());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tempoGiacenza</column-name><column-value><![CDATA[");
		sb.append(getTempoGiacenza());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>incassoTotalePompa</column-name><column-value><![CDATA[");
		sb.append(getIncassoTotalePompa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statoPompa</column-name><column-value><![CDATA[");
		sb.append(getStatoPompa());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Pompa.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Pompa.class };
	private String _uuid;
	private String _originalUuid;
	private long _pompaId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _quantitaDiesel;
	private int _quantitaBenzina;
	private int _tempoGiacenza;
	private int _incassoTotalePompa;
	private boolean _statoPompa;
	private long _columnBitmask;
	private Pompa _escapedModel;
}