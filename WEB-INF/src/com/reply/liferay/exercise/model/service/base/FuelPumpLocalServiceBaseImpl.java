/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.reply.liferay.exercise.model.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.reply.liferay.exercise.model.model.FuelPump;
import com.reply.liferay.exercise.model.service.FuelPumpLocalService;
import com.reply.liferay.exercise.model.service.persistence.FuelPumpPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the fuel pump local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.reply.liferay.exercise.model.service.impl.FuelPumpLocalServiceImpl}.
 * </p>
 *
 * @author s.girardello
 * @see com.reply.liferay.exercise.model.service.impl.FuelPumpLocalServiceImpl
 * @see com.reply.liferay.exercise.model.service.FuelPumpLocalServiceUtil
 * @generated
 */
public abstract class FuelPumpLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements FuelPumpLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.reply.liferay.exercise.model.service.FuelPumpLocalServiceUtil} to access the fuel pump local service.
	 */

	/**
	 * Adds the fuel pump to the database. Also notifies the appropriate model listeners.
	 *
	 * @param fuelPump the fuel pump
	 * @return the fuel pump that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FuelPump addFuelPump(FuelPump fuelPump) throws SystemException {
		fuelPump.setNew(true);

		return fuelPumpPersistence.update(fuelPump);
	}

	/**
	 * Creates a new fuel pump with the primary key. Does not add the fuel pump to the database.
	 *
	 * @param fuelPumpId the primary key for the new fuel pump
	 * @return the new fuel pump
	 */
	@Override
	public FuelPump createFuelPump(long fuelPumpId) {
		return fuelPumpPersistence.create(fuelPumpId);
	}

	/**
	 * Deletes the fuel pump with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fuelPumpId the primary key of the fuel pump
	 * @return the fuel pump that was removed
	 * @throws PortalException if a fuel pump with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FuelPump deleteFuelPump(long fuelPumpId)
		throws PortalException, SystemException {
		return fuelPumpPersistence.remove(fuelPumpId);
	}

	/**
	 * Deletes the fuel pump from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fuelPump the fuel pump
	 * @return the fuel pump that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FuelPump deleteFuelPump(FuelPump fuelPump) throws SystemException {
		return fuelPumpPersistence.remove(fuelPump);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(FuelPump.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return fuelPumpPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.FuelPumpModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return fuelPumpPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.FuelPumpModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return fuelPumpPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return fuelPumpPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return fuelPumpPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public FuelPump fetchFuelPump(long fuelPumpId) throws SystemException {
		return fuelPumpPersistence.fetchByPrimaryKey(fuelPumpId);
	}

	/**
	 * Returns the fuel pump with the matching UUID and company.
	 *
	 * @param uuid the fuel pump's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching fuel pump, or <code>null</code> if a matching fuel pump could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public FuelPump fetchFuelPumpByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return fuelPumpPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the fuel pump matching the UUID and group.
	 *
	 * @param uuid the fuel pump's UUID
	 * @param groupId the primary key of the group
	 * @return the matching fuel pump, or <code>null</code> if a matching fuel pump could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public FuelPump fetchFuelPumpByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return fuelPumpPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the fuel pump with the primary key.
	 *
	 * @param fuelPumpId the primary key of the fuel pump
	 * @return the fuel pump
	 * @throws PortalException if a fuel pump with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public FuelPump getFuelPump(long fuelPumpId)
		throws PortalException, SystemException {
		return fuelPumpPersistence.findByPrimaryKey(fuelPumpId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return fuelPumpPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the fuel pump with the matching UUID and company.
	 *
	 * @param uuid the fuel pump's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching fuel pump
	 * @throws PortalException if a matching fuel pump could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public FuelPump getFuelPumpByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return fuelPumpPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the fuel pump matching the UUID and group.
	 *
	 * @param uuid the fuel pump's UUID
	 * @param groupId the primary key of the group
	 * @return the matching fuel pump
	 * @throws PortalException if a matching fuel pump could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public FuelPump getFuelPumpByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return fuelPumpPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the fuel pumps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.FuelPumpModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of fuel pumps
	 * @param end the upper bound of the range of fuel pumps (not inclusive)
	 * @return the range of fuel pumps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<FuelPump> getFuelPumps(int start, int end)
		throws SystemException {
		return fuelPumpPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of fuel pumps.
	 *
	 * @return the number of fuel pumps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getFuelPumpsCount() throws SystemException {
		return fuelPumpPersistence.countAll();
	}

	/**
	 * Updates the fuel pump in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param fuelPump the fuel pump
	 * @return the fuel pump that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FuelPump updateFuelPump(FuelPump fuelPump) throws SystemException {
		return fuelPumpPersistence.update(fuelPump);
	}

	/**
	 * Returns the fuel pump local service.
	 *
	 * @return the fuel pump local service
	 */
	public com.reply.liferay.exercise.model.service.FuelPumpLocalService getFuelPumpLocalService() {
		return fuelPumpLocalService;
	}

	/**
	 * Sets the fuel pump local service.
	 *
	 * @param fuelPumpLocalService the fuel pump local service
	 */
	public void setFuelPumpLocalService(
		com.reply.liferay.exercise.model.service.FuelPumpLocalService fuelPumpLocalService) {
		this.fuelPumpLocalService = fuelPumpLocalService;
	}

	/**
	 * Returns the fuel pump remote service.
	 *
	 * @return the fuel pump remote service
	 */
	public com.reply.liferay.exercise.model.service.FuelPumpService getFuelPumpService() {
		return fuelPumpService;
	}

	/**
	 * Sets the fuel pump remote service.
	 *
	 * @param fuelPumpService the fuel pump remote service
	 */
	public void setFuelPumpService(
		com.reply.liferay.exercise.model.service.FuelPumpService fuelPumpService) {
		this.fuelPumpService = fuelPumpService;
	}

	/**
	 * Returns the fuel pump persistence.
	 *
	 * @return the fuel pump persistence
	 */
	public FuelPumpPersistence getFuelPumpPersistence() {
		return fuelPumpPersistence;
	}

	/**
	 * Sets the fuel pump persistence.
	 *
	 * @param fuelPumpPersistence the fuel pump persistence
	 */
	public void setFuelPumpPersistence(FuelPumpPersistence fuelPumpPersistence) {
		this.fuelPumpPersistence = fuelPumpPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.reply.liferay.exercise.model.model.FuelPump",
			fuelPumpLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.reply.liferay.exercise.model.model.FuelPump");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return FuelPump.class;
	}

	protected String getModelClassName() {
		return FuelPump.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = fuelPumpPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.reply.liferay.exercise.model.service.FuelPumpLocalService.class)
	protected com.reply.liferay.exercise.model.service.FuelPumpLocalService fuelPumpLocalService;
	@BeanReference(type = com.reply.liferay.exercise.model.service.FuelPumpService.class)
	protected com.reply.liferay.exercise.model.service.FuelPumpService fuelPumpService;
	@BeanReference(type = FuelPumpPersistence.class)
	protected FuelPumpPersistence fuelPumpPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private FuelPumpLocalServiceClpInvoker _clpInvoker = new FuelPumpLocalServiceClpInvoker();
}