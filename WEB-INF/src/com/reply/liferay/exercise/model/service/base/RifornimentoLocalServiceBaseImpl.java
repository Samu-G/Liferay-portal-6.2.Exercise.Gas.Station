/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.reply.liferay.exercise.model.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.reply.liferay.exercise.model.model.Rifornimento;
import com.reply.liferay.exercise.model.service.RifornimentoLocalService;
import com.reply.liferay.exercise.model.service.persistence.PompaPersistence;
import com.reply.liferay.exercise.model.service.persistence.RifornimentoPersistence;
import com.reply.liferay.exercise.model.service.persistence.StazioneDiRifornimentoPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the rifornimento local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.reply.liferay.exercise.model.service.impl.RifornimentoLocalServiceImpl}.
 * </p>
 *
 * @author s.girardello
 * @see com.reply.liferay.exercise.model.service.impl.RifornimentoLocalServiceImpl
 * @see com.reply.liferay.exercise.model.service.RifornimentoLocalServiceUtil
 * @generated
 */
public abstract class RifornimentoLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements RifornimentoLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.reply.liferay.exercise.model.service.RifornimentoLocalServiceUtil} to access the rifornimento local service.
	 */

	/**
	 * Adds the rifornimento to the database. Also notifies the appropriate model listeners.
	 *
	 * @param rifornimento the rifornimento
	 * @return the rifornimento that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Rifornimento addRifornimento(Rifornimento rifornimento)
		throws SystemException {
		rifornimento.setNew(true);

		return rifornimentoPersistence.update(rifornimento);
	}

	/**
	 * Creates a new rifornimento with the primary key. Does not add the rifornimento to the database.
	 *
	 * @param rifornimentoId the primary key for the new rifornimento
	 * @return the new rifornimento
	 */
	@Override
	public Rifornimento createRifornimento(long rifornimentoId) {
		return rifornimentoPersistence.create(rifornimentoId);
	}

	/**
	 * Deletes the rifornimento with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rifornimentoId the primary key of the rifornimento
	 * @return the rifornimento that was removed
	 * @throws PortalException if a rifornimento with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Rifornimento deleteRifornimento(long rifornimentoId)
		throws PortalException, SystemException {
		return rifornimentoPersistence.remove(rifornimentoId);
	}

	/**
	 * Deletes the rifornimento from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rifornimento the rifornimento
	 * @return the rifornimento that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Rifornimento deleteRifornimento(Rifornimento rifornimento)
		throws SystemException {
		return rifornimentoPersistence.remove(rifornimento);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Rifornimento.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return rifornimentoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.RifornimentoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return rifornimentoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.RifornimentoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return rifornimentoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return rifornimentoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return rifornimentoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Rifornimento fetchRifornimento(long rifornimentoId)
		throws SystemException {
		return rifornimentoPersistence.fetchByPrimaryKey(rifornimentoId);
	}

	/**
	 * Returns the rifornimento with the primary key.
	 *
	 * @param rifornimentoId the primary key of the rifornimento
	 * @return the rifornimento
	 * @throws PortalException if a rifornimento with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Rifornimento getRifornimento(long rifornimentoId)
		throws PortalException, SystemException {
		return rifornimentoPersistence.findByPrimaryKey(rifornimentoId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return rifornimentoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the rifornimentos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.reply.liferay.exercise.model.model.impl.RifornimentoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of rifornimentos
	 * @param end the upper bound of the range of rifornimentos (not inclusive)
	 * @return the range of rifornimentos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Rifornimento> getRifornimentos(int start, int end)
		throws SystemException {
		return rifornimentoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of rifornimentos.
	 *
	 * @return the number of rifornimentos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getRifornimentosCount() throws SystemException {
		return rifornimentoPersistence.countAll();
	}

	/**
	 * Updates the rifornimento in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param rifornimento the rifornimento
	 * @return the rifornimento that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Rifornimento updateRifornimento(Rifornimento rifornimento)
		throws SystemException {
		return rifornimentoPersistence.update(rifornimento);
	}

	/**
	 * Returns the pompa local service.
	 *
	 * @return the pompa local service
	 */
	public com.reply.liferay.exercise.model.service.PompaLocalService getPompaLocalService() {
		return pompaLocalService;
	}

	/**
	 * Sets the pompa local service.
	 *
	 * @param pompaLocalService the pompa local service
	 */
	public void setPompaLocalService(
		com.reply.liferay.exercise.model.service.PompaLocalService pompaLocalService) {
		this.pompaLocalService = pompaLocalService;
	}

	/**
	 * Returns the pompa remote service.
	 *
	 * @return the pompa remote service
	 */
	public com.reply.liferay.exercise.model.service.PompaService getPompaService() {
		return pompaService;
	}

	/**
	 * Sets the pompa remote service.
	 *
	 * @param pompaService the pompa remote service
	 */
	public void setPompaService(
		com.reply.liferay.exercise.model.service.PompaService pompaService) {
		this.pompaService = pompaService;
	}

	/**
	 * Returns the pompa persistence.
	 *
	 * @return the pompa persistence
	 */
	public PompaPersistence getPompaPersistence() {
		return pompaPersistence;
	}

	/**
	 * Sets the pompa persistence.
	 *
	 * @param pompaPersistence the pompa persistence
	 */
	public void setPompaPersistence(PompaPersistence pompaPersistence) {
		this.pompaPersistence = pompaPersistence;
	}

	/**
	 * Returns the rifornimento local service.
	 *
	 * @return the rifornimento local service
	 */
	public com.reply.liferay.exercise.model.service.RifornimentoLocalService getRifornimentoLocalService() {
		return rifornimentoLocalService;
	}

	/**
	 * Sets the rifornimento local service.
	 *
	 * @param rifornimentoLocalService the rifornimento local service
	 */
	public void setRifornimentoLocalService(
		com.reply.liferay.exercise.model.service.RifornimentoLocalService rifornimentoLocalService) {
		this.rifornimentoLocalService = rifornimentoLocalService;
	}

	/**
	 * Returns the rifornimento remote service.
	 *
	 * @return the rifornimento remote service
	 */
	public com.reply.liferay.exercise.model.service.RifornimentoService getRifornimentoService() {
		return rifornimentoService;
	}

	/**
	 * Sets the rifornimento remote service.
	 *
	 * @param rifornimentoService the rifornimento remote service
	 */
	public void setRifornimentoService(
		com.reply.liferay.exercise.model.service.RifornimentoService rifornimentoService) {
		this.rifornimentoService = rifornimentoService;
	}

	/**
	 * Returns the rifornimento persistence.
	 *
	 * @return the rifornimento persistence
	 */
	public RifornimentoPersistence getRifornimentoPersistence() {
		return rifornimentoPersistence;
	}

	/**
	 * Sets the rifornimento persistence.
	 *
	 * @param rifornimentoPersistence the rifornimento persistence
	 */
	public void setRifornimentoPersistence(
		RifornimentoPersistence rifornimentoPersistence) {
		this.rifornimentoPersistence = rifornimentoPersistence;
	}

	/**
	 * Returns the stazione di rifornimento local service.
	 *
	 * @return the stazione di rifornimento local service
	 */
	public com.reply.liferay.exercise.model.service.StazioneDiRifornimentoLocalService getStazioneDiRifornimentoLocalService() {
		return stazioneDiRifornimentoLocalService;
	}

	/**
	 * Sets the stazione di rifornimento local service.
	 *
	 * @param stazioneDiRifornimentoLocalService the stazione di rifornimento local service
	 */
	public void setStazioneDiRifornimentoLocalService(
		com.reply.liferay.exercise.model.service.StazioneDiRifornimentoLocalService stazioneDiRifornimentoLocalService) {
		this.stazioneDiRifornimentoLocalService = stazioneDiRifornimentoLocalService;
	}

	/**
	 * Returns the stazione di rifornimento remote service.
	 *
	 * @return the stazione di rifornimento remote service
	 */
	public com.reply.liferay.exercise.model.service.StazioneDiRifornimentoService getStazioneDiRifornimentoService() {
		return stazioneDiRifornimentoService;
	}

	/**
	 * Sets the stazione di rifornimento remote service.
	 *
	 * @param stazioneDiRifornimentoService the stazione di rifornimento remote service
	 */
	public void setStazioneDiRifornimentoService(
		com.reply.liferay.exercise.model.service.StazioneDiRifornimentoService stazioneDiRifornimentoService) {
		this.stazioneDiRifornimentoService = stazioneDiRifornimentoService;
	}

	/**
	 * Returns the stazione di rifornimento persistence.
	 *
	 * @return the stazione di rifornimento persistence
	 */
	public StazioneDiRifornimentoPersistence getStazioneDiRifornimentoPersistence() {
		return stazioneDiRifornimentoPersistence;
	}

	/**
	 * Sets the stazione di rifornimento persistence.
	 *
	 * @param stazioneDiRifornimentoPersistence the stazione di rifornimento persistence
	 */
	public void setStazioneDiRifornimentoPersistence(
		StazioneDiRifornimentoPersistence stazioneDiRifornimentoPersistence) {
		this.stazioneDiRifornimentoPersistence = stazioneDiRifornimentoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.reply.liferay.exercise.model.model.Rifornimento",
			rifornimentoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.reply.liferay.exercise.model.model.Rifornimento");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Rifornimento.class;
	}

	protected String getModelClassName() {
		return Rifornimento.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = rifornimentoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.reply.liferay.exercise.model.service.PompaLocalService.class)
	protected com.reply.liferay.exercise.model.service.PompaLocalService pompaLocalService;
	@BeanReference(type = com.reply.liferay.exercise.model.service.PompaService.class)
	protected com.reply.liferay.exercise.model.service.PompaService pompaService;
	@BeanReference(type = PompaPersistence.class)
	protected PompaPersistence pompaPersistence;
	@BeanReference(type = com.reply.liferay.exercise.model.service.RifornimentoLocalService.class)
	protected com.reply.liferay.exercise.model.service.RifornimentoLocalService rifornimentoLocalService;
	@BeanReference(type = com.reply.liferay.exercise.model.service.RifornimentoService.class)
	protected com.reply.liferay.exercise.model.service.RifornimentoService rifornimentoService;
	@BeanReference(type = RifornimentoPersistence.class)
	protected RifornimentoPersistence rifornimentoPersistence;
	@BeanReference(type = com.reply.liferay.exercise.model.service.StazioneDiRifornimentoLocalService.class)
	protected com.reply.liferay.exercise.model.service.StazioneDiRifornimentoLocalService stazioneDiRifornimentoLocalService;
	@BeanReference(type = com.reply.liferay.exercise.model.service.StazioneDiRifornimentoService.class)
	protected com.reply.liferay.exercise.model.service.StazioneDiRifornimentoService stazioneDiRifornimentoService;
	@BeanReference(type = StazioneDiRifornimentoPersistence.class)
	protected StazioneDiRifornimentoPersistence stazioneDiRifornimentoPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private RifornimentoLocalServiceClpInvoker _clpInvoker = new RifornimentoLocalServiceClpInvoker();
}